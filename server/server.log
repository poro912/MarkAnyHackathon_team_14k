/home/ec2-user/server/aws_backend.py:984: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [2785]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
S3 버킷 생성 실패: An error occurred (InvalidLocationConstraint) when calling the CreateBucket operation: The specified location-constraint is not valid
DynamoDB 테이블 'utility-builds' 이미 존재
✅ AWS Bedrock 연결 성공
Agent 래퍼 초기화 완료
Agent 래퍼 초기화 완료
✅ 문서 생성 AI 초기화 완료
INFO:     121.128.236.6:65155 - "GET /advanced_utility_extractor.html HTTP/1.1" 200 OK
INFO:     121.128.236.6:59144 - "GET /project_evaluation.html HTTP/1.1" 200 OK
INFO:     121.128.236.6:59144 - "GET /get_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:59144 - "GET /system_info.html HTTP/1.1" 200 OK
INFO:     121.128.236.6:59144 - "GET /get_history HTTP/1.1" 200 OK
파일 처리 시작: 시간 테스트.cpp
파일 크기: 936 bytes
디코딩된 텍스트 길이: 856
파일 확장자: .cpp
1단계 - 함수 추출: 시간 테스트.cpp
추출된 원본 함수: 1개
2단계 - AI 리팩토링: 시간 테스트.cpp
🤖 AI 리팩토링 결과: 1개 함수
  함수 1: FormatTimeWithPrecision
    parameters: const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6
    return_type: std::string - 포맷된 시간 문자열
    header_declaration: LIBRARY_API std::string FormatTimeWithPrecision(const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6);
    required_headers: ['<chrono>', '<ctime>', '<iomanip>', '<sstream>', '<string>', '<cmath>']
    reusability_score: 9
📊 필터링 후: 1개 함수 (점수 7점 이상)
🔍 검증 시작: 1개 함수

--- 함수 1: FormatTimeWithPrecision ---
원본 parameters: const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6
원본 return_type: std::string - 포맷된 시간 문자열
원본 header_declaration: LIBRARY_API std::string FormatTimeWithPrecision(const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6);
검증 후 required_headers: ['<chrono>', '<ctime>', '<iomanip>', '<sstream>', '<string>', '<cmath>']
처리된 func_name: FormatTimeWithPrecision
처리된 params: const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6
처리된 return_type: std::string
AI 제공 header 사용: LIBRARY_API std::string FormatTimeWithPrecision(const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6);
코드에 시그니처 이미 존재
최종 header_declaration: LIBRARY_API std::string FormatTimeWithPrecision(const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6);

✅ 검증 완료: 1개 함수
리팩토링된 함수: 1개
📊 전체 함수: 1개 (기존: 0개, 새로 추가: 1개)
INFO:     121.128.236.6:60202 - "POST /analyze HTTP/1.1" 200 OK
🏗️ 빌드 요청 받음: 1개 함수
  함수 1: FormatTimeWithPrecision
    header_declaration 존재: False
    사용 가능한 필드들: ['name', 'description', 'code']
🔧 헤더 생성 시작: 1개 함수

--- 헤더 생성 함수 1: FormatTimeWithPrecision ---
🔧 코드에서 추출한 헤더: LIBRARY_API std::string FormatTimeWithPrecision(const std::chrono::system_clock::time_point& time = std::chrono::system_clock::now(), const std::string& format = "%Y-%m-%d %H:%M:%S", int precision = 6);
📋 FormatTimeWithPrecision: AI 제공 헤더 ['<chrono>', '<ctime>', '<iomanip>', '<sstream>', '<string>', '<cmath>']
🔧 최종 포함된 헤더들: ['<chrono>', '<cmath>', '<ctime>', '<iomanip>', '<iostream>', '<sstream>', '<string>']
🔨 C++ 컴파일 시작: /tmp/tmpxy05ie7a/5df02007-b471-4983-bf45-1acfcc995dd2.cpp
✅ 컴파일 성공!
📁 로컬 저장 완료: /tmp/builds/5df02007-b471-4983-bf45-1acfcc995dd2.dll
☁️ S3 업로드 완료: 5df02007-b471-4983-bf45-1acfcc995dd2
INFO:     121.128.236.6:49701 - "POST /build HTTP/1.1" 200 OK
INFO:     121.128.236.6:59488 - "GET /download/5df02007-b471-4983-bf45-1acfcc995dd2/header HTTP/1.1" 200 OK
INFO:     121.128.236.6:52007 - "GET /extraction_history HTTP/1.1" 200 OK
파일 처리 시작: 파일읽기 테스트.cpp
파일 크기: 1550 bytes
디코딩된 텍스트 길이: 1486
파일 확장자: .cpp
1단계 - 함수 추출: 파일읽기 테스트.cpp
추출된 원본 함수: 2개
2단계 - AI 리팩토링: 파일읽기 테스트.cpp
Bedrock 호출 오류 (시도 1/3): An error occurred (ThrottlingException) when calling the Converse operation (reached max retries: 4): Too many requests, please wait before trying again.
🔄 재시도 1/3, 6초 대기
🤖 AI 리팩토링 결과: 2개 함수
  함수 1: ReadFileToString
    parameters: const std::filesystem::path& path, std::string* out_error = nullptr
    return_type: std::optional<std::string> - 파일 내용 또는 에러 시 std::nullopt
    header_declaration: LIBRARY_API inline std::optional<std::string> ReadFileToString(const std::filesystem::path& path, std::string* out_error = nullptr);
    required_headers: ['<filesystem>', '<fstream>', '<string>', '<optional>']
    reusability_score: 9
  함수 2: ReadFileToStringOrThrow
    parameters: const std::filesystem::path& path
    return_type: std::string - 파일 내용
    header_declaration: LIBRARY_API inline std::string ReadFileToStringOrThrow(const std::filesystem::path& path);
    required_headers: ['<filesystem>', '<string>', '<stdexcept>']
    reusability_score: 8
📊 필터링 후: 2개 함수 (점수 7점 이상)
🔍 검증 시작: 2개 함수

--- 함수 1: ReadFileToString ---
원본 parameters: const std::filesystem::path& path, std::string* out_error = nullptr
원본 return_type: std::optional<std::string> - 파일 내용 또는 에러 시 std::nullopt
원본 header_declaration: LIBRARY_API inline std::optional<std::string> ReadFileToString(const std::filesystem::path& path, std::string* out_error = nullptr);
검증 후 required_headers: ['<filesystem>', '<fstream>', '<string>', '<optional>']
처리된 func_name: ReadFileToString
처리된 params: const std::filesystem::path& path, std::string* out_error = nullptr
처리된 return_type: std::optional<std::string>
AI 제공 header 사용: LIBRARY_API inline std::optional<std::string> ReadFileToString(const std::filesystem::path& path, std::string* out_error = nullptr);
코드에 시그니처 이미 존재
최종 header_declaration: LIBRARY_API inline std::optional<std::string> ReadFileToString(const std::filesystem::path& path, std::string* out_error = nullptr);

--- 함수 2: ReadFileToStringOrThrow ---
원본 parameters: const std::filesystem::path& path
원본 return_type: std::string - 파일 내용
원본 header_declaration: LIBRARY_API inline std::string ReadFileToStringOrThrow(const std::filesystem::path& path);
검증 후 required_headers: ['<filesystem>', '<string>', '<stdexcept>']
처리된 func_name: ReadFileToStringOrThrow
처리된 params: const std::filesystem::path& path
처리된 return_type: std::string
AI 제공 header 사용: LIBRARY_API inline std::string ReadFileToStringOrThrow(const std::filesystem::path& path);
코드에 시그니처 이미 존재
최종 header_declaration: LIBRARY_API inline std::string ReadFileToStringOrThrow(const std::filesystem::path& path);

✅ 검증 완료: 2개 함수
리팩토링된 함수: 2개
📊 전체 함수: 3개 (기존: 1개, 새로 추가: 2개)
INFO:     121.128.236.6:52007 - "POST /analyze HTTP/1.1" 200 OK
INFO:     121.128.236.6:57745 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:51857 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:51857 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:51857 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:52000 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:51857 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:52000 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:52000 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:52000 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:51857 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:52298 - "POST /search_functions HTTP/1.1" 200 OK
INFO:     121.128.236.6:52298 - "POST /search_functions HTTP/1.1" 200 OK
INFO:     121.128.236.6:52298 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:52298 - "POST /search_functions HTTP/1.1" 200 OK
INFO:     121.128.236.6:52298 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:49666 - "GET /extraction_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:49666 - "GET /extraction_history HTTP/1.1" 200 OK
🔍 Loading index.html from: /home/ec2-user/server/index.html
🔍 File exists: True
🔍 Content length: 5112
🔍 Title in content: True
INFO:     121.128.236.6:49666 - "GET / HTTP/1.1" 200 OK
INFO:     121.128.236.6:49666 - "GET /advanced_utility_extractor.html HTTP/1.1" 200 OK
INFO:     121.128.236.6:49666 - "GET /get_history HTTP/1.1" 200 OK
INFO:     121.128.236.6:53606 - "GET /favicon.ico HTTP/1.1" 404 Not Found
INFO:     121.128.236.6:53606 - "GET /extraction_history HTTP/1.1" 200 OK
