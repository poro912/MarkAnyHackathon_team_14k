[
  {
    "file_name": "Program.cs",
    "ai_difficulty": 3,
    "user_difficulty": 3,
    "difficulty_diff": 0,
    "feedback_reason": "기본적으로 생성되는 코드를 기반으로 약간의 코드만 추가 되었기 때문에 기존 평가와 동일하게 3의 난이도로 평가하였음",
    "file_content": "﻿// See https://aka.ms/new-console-template for more information\n\nusing ServerToClient;\nusing ServerCommunicater = ServerToClient.Server;\nusing ServerSystem;\nusing System.Data;\n\nConsole.WriteLine(\"MyMate Server Start\");\n\n// 서버 생성\nServerCommunicater server = ServerCommunicater.Instance;\nserver.clientAccept = AcceptProcess.AccpetRun;\n\n// 로그인 컨테이너 생성\n// 로그인 이후의 데이터가 저장되는 컨테이너 (Dictionary)\nLoginContainer login = LoginContainer.Instance;\n\n// 서버 리스트의 데이터를 저장하는 컨테이너\nServerContainer serverContain = ServerContainer.Instance;\n\nConsole.WriteLine(\"Server ip : \" + Default.Network.Address);\n\n// 1분마다 비 로그인 클라이언트가 연결 됐는지 확인하기위한 메소드\n//BeforeLoginEvent.ConnectCheckThread();\n\n// 버퍼 대기를 없애기 위한 변수\nchar k;\nwhile (true)\n{\n\t// 프로세스과부화를 막기위한 + 버퍼 대기를 막기 위한\n\t//Thread.Sleep(5000);\n\tk = Console.ReadKey().KeyChar;\n\n\t//BeforeLoginEvent.ConnectCheck();\n\n\n\t//beforeClient=before.Check();\n\n\t// 로그인 된 클라이언트가 있다면\n\t//if(null!=beforeClient)\n\t//{\n\t// beforeLogin 종료\n\t//\tbeforeClient.Delete();\n\t//\tlogin.registUser(beforeClient.usercode, new(beforeClient.client));\n\t//}\n}",
    "file_metrics": {
      "total_lines": 46,
      "code_lines": 16,
      "complexity": 14,
      "language": "Unknown"
    },
    "timestamp": "2025-09-30T02:07:25.467547"
  },
  {
    "file_name": "Program.cs",
    "ai_difficulty": 3,
    "user_difficulty": 3,
    "difficulty_diff": 0,
    "feedback_reason": "프로젝트 평가의 파일 분석 평가 파일명 클릭 시 나타나는 정보와\n커밋 네트워크 그래프의 커밋의 파일 명 클릭 시 나타나는 정보 UI가 비슷해야해\n\n커밋 네트워크 그래프의 파일명 클릭 시 나타나는 정보쪽을 파일 분석 평가 파일명 클릭 시 나타나는 정보와 비슷한 형태로 가로로 배치되고, 유저 피드백을 추가해줘",
    "file_content": "﻿// See https://aka.ms/new-console-template for more information\n\nusing ServerToClient;\nusing ServerCommunicater = ServerToClient.Server;\nusing ServerSystem;\nusing System.Data;\n\nConsole.WriteLine(\"MyMate Server Start\");\n\n// 서버 생성\nServerCommunicater server = ServerCommunicater.Instance;\nserver.clientAccept = AcceptProcess.AccpetRun;\n\n// 로그인 컨테이너 생성\n// 로그인 이후의 데이터가 저장되는 컨테이너 (Dictionary)\nLoginContainer login = LoginContainer.Instance;\n\n// 서버 리스트의 데이터를 저장하는 컨테이너\nServerContainer serverContain = ServerContainer.Instance;\n\nConsole.WriteLine(\"Server ip : \" + Default.Network.Address);\n\n// 1분마다 비 로그인 클라이언트가 연결 됐는지 확인하기위한 메소드\n//BeforeLoginEvent.ConnectCheckThread();\n\n// 버퍼 대기를 없애기 위한 변수\nchar k;\nwhile (true)\n{\n\t// 프로세스과부화를 막기위한 + 버퍼 대기를 막기 위한\n\t//Thread.Sleep(5000);\n\tk = Console.ReadKey().KeyChar;\n\n\t//BeforeLoginEvent.ConnectCheck();\n\n\n\t//beforeClient=before.Check();\n\n\t// 로그인 된 클라이언트가 있다면\n\t//if(null!=beforeClient)\n\t//{\n\t// beforeLogin 종료\n\t//\tbeforeClient.Delete();\n\t//\tlogin.registUser(beforeClient.usercode, new(beforeClient.client));\n\t//}\n}",
    "file_metrics": {
      "total_lines": 46,
      "code_lines": 16,
      "complexity": 14,
      "language": "Unknown"
    },
    "timestamp": "2025-09-30T02:39:14.438268"
  },
  {
    "file_name": "DBModule.cs",
    "ai_difficulty": 2,
    "user_difficulty": 2,
    "difficulty_diff": 0,
    "feedback_reason": "test",
    "file_content": "﻿using MySql.Data.MySqlClient;\nusing MySql.Data.Types;\nusing ServerSystem;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\nusing System.Runtime.Serialization;\nusing System.Security.Policy;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace MyMate_Server\n{\n    public class UserParm\n    {\n        public int userCode;\n        public string id;\n        public string pwd;\n        public string nick;\n        public string name;\n        public string phone;\n        public string email;\n        public string content;\n        public int isDeleted;\n        public string dataFormat;\n    }\n\n    public class FriendParm\n    {\n        public int userCode;\n        public int friendCode;\n        public string id;\n        public string phone;\n        public string nick;\n        public int hide;\n        public int block;\n        public int isDeleted;\n    }\n\n    public class UserChannelParm\n    {\n        public int userCode;\n        public int channelCode;\n        public string title;\n        public int state;\n        public int isPrivate;\n        public int isDeleted;\n    }\n\n    public class UserChecklistParm\n    {\n        public int userCode;\n        public int channelCode;\n        public int checklistCode;\n        public string cotent;\n        public long startTime;\n        public long endTime;\n        public int ischecked;\n        public int isPrivate;\n        public int isDeleted;\n\n    }\n\n    public class UserCalendarParm\n    {\n        public int userCode;\n        public int channelCode;\n        public int calendarCode;\n        public string content;\n        public long startTime;\n        public long endTime;\n        public int isPrivate;\n        public int isDeleted;\n    }\n\n    public class ServerParm\n    {\n        public int serverCode;\n        public string title;\n        public int adminCode;\n        public int isSingle;\n        public int isDeleted;\n    }\n\n    public class ChannelParm\n    {\n        public int serverCode;\n        public int channelCode;\n        public string title;\n        public int state;\n        public int isDeleted;\n    }\n\n    public class MessageParm\n    {\n        public int serverCode;\n        public int channelCode;\n        public int messageCode;\n        public string content;\n        public int creater;\n        public long startTime;\n        public int isPrivate;\n        public int isDeleted;\n    }\n\n    public class ChecklistParm\n    {\n        public int serverCode;\n        public int channelCode;\n        public int checklistCode;\n        public string content;\n        public int creater;\n        public long startTime;\n        public long endTime;\n        public int ischecked;\n        public int isPrivate;\n        public int isDeleted;\n    }\n\n    public class CalendarParm\n    {\n        public int serverCode;\n        public int channelCode;\n        public int calendarCode;\n        public string content;\n        public int creater;\n        public long startTime;\n        public long endTime;\n        public int isPrivate;\n        public int isDeleted;\n    }\n\n    /// <summary>\n    /// SQL Query 결과 값이 없는 경우 발생되는 오류 클래스\n    /// </summary>\n    public class NODATAEXCEPTION : Exception\n    {\n        public NODATAEXCEPTION() : base()\n        {\n        }\n\n        public NODATAEXCEPTION(string message) : base(message)\n        {\n        }\n\n        public NODATAEXCEPTION(string message, Exception innerException) : base(message, innerException)\n        {\n        }\n\n        public NODATAEXCEPTION(SerializationInfo info, StreamingContext context)\n        {\n        }\n\n    }\n\n    /// <summary>\n    /// SQL connection 객체가 종료되지 못한 경우 발생되는 오류 클래스\n    /// </summary>\n    public class NOTCLOSEEXCEPTION : Exception\n    {\n        public NOTCLOSEEXCEPTION() : base()\n        {\n        }\n\n        public NOTCLOSEEXCEPTION(string message) : base(message)\n        {\n        }\n\n        public NOTCLOSEEXCEPTION(string message, Exception innerException) : base(message, innerException)\n        {\n        }\n\n        public NOTCLOSEEXCEPTION(SerializationInfo info, StreamingContext context)\n        {\n        }\n\n    }\n\n    public class DBModule\n    {\n        // user 기능\n        const string Login = \"login_user\";\n        const string Signin = \"create_user\";\n        const string GetUser = \"select_user\";\n        const string GetUserCode = \"select_u_code\";\n        const string ChangeUser = \"update_user\";\n\n        // friend 기능\n        const string AddFriend = \"create_friend\";\n        const string GetFriend = \"select_friend\";\n        const string SetFriend = \"update_friend\";\n\n        // user channel 기능\n        const string AddUserChannel = \"create_channel\";\n        const string GetUserChannel = \"select_channel\";\n        const string SetUserChannel = \"update_channel\";\n\n        // user checklist 기능\n        const string AddUserChecklist = \"create_u_checklist\";\n        const string GetUserChecklist = \"select_u_checklist\";\n        const string SetUserChecklist = \"update_u_checklist\";\n\n        // user calendar 기능\n        const string AddUserCalendar = \"create_u_calendar\";\n        const string GetUserCalendar = \"select_u_calendar\";\n        const string SetUserCalendar = \"update_u_calendar\";\n\n        // server 기능\n        const string AddServer = \"create_server\";\n        const string GetServer = \"select_server\";\n        const string SetServer = \"update_server\";\n\n        // channel 기능\n        const string AddChannel = \"create_channel\";\n        const string GetChannel = \"select_channel\";\n        const string SetChannel = \"update_channel\";\n\n        // message 기능\n        const string AddMessage = \"create_message\";\n        const string GetMessage = \"select_message\";\n        const string SetMessage = \"update_message\";\n\n        // checklist 기능\n        const string AddChecklist = \"create_checklist\";\n        const string GetChecklist = \"select_checklist\";\n        const string SetChecklist = \"update_checklist\";\n\n        // calendar 기능\n        const string AddCalendar = \"create_calendar\";\n        const string GetCalendar = \"select_calendar\";\n        const string SetCalendar = \"update_calendar\";\n\n\n        public string query;\n\n        /// <summary>\n        /// DB에 접속하기 위해서 db connection 객체를 생성하는 메서드\n        /// connection생성에 필요한 공통 부분을 처리하는 메서드\n        /// </summary>\n        /// <param name=\"user\">DB 계정</param>\n        /// <param name=\"database\">DB 이름</param>\n        /// <param name=\"password\">DB 비밀번호</param>\n        /// <param name=\"sslmode\">DB sslmode</param>\n        /// <returns></returns>\n        private MySqlConnection Connect(\n            string user,\n            string database,\n            string password,\n            string sslmode\n        )\n        {\n            // DB 서버와 포트번호\n            string server = \"localhost\";\n            int port = 3306;\n\n            // DB connection 객체를 생성하기 위한 문자열\n            string conn = $\"SERVER = {server};port = {port};user = {user}; DATABASE = {database}; password = {password}; SSLMODE = {sslmode}\";\n\n            // DB connection 객체 생성\n            MySqlConnection Conn = new MySqlConnection(conn);\n\n            // conn 객체를 open 상태로 만들어줌\n            Conn.Open();\n\n            return Conn;\n        }\n\n        /// <summary>\n        /// DB를 admin 계정으로 접속하기 위한 db connection 객체를 생성하는 메서드\n        /// Connect메서드를 이용하여 관리자 권한으로 connection 객체를 생성하는 메서드\n        /// </summary>\n        /// <returns></returns>\n        private MySqlConnection AdminConnect()\n        {\n            // DB admin 계정으로 connection 객체 만들기\n            MySqlConnection adminConn = Connect(\"root\", \"db_server\", \"yuhan1234\", \"none\");\n\n            return adminConn;\n        }\n\n        /// <summary>\n        /// DB를 user 계정으로 접속하기 위한 db connection 객체를 생성하는 메서드\n        /// Connect메서드를 이용하여 사용자 권한으로 connection 객체를 생성하는 메서드\n        /// </summary>\n        /// <returns></returns>\n        private MySqlConnection UserConnect()\n        {\n            // DB user 계정으로 connection 객체 만들기\n            MySqlConnection adminConn = Connect(\"root\", \"db_server\", \"yuhan1234\", \"none\");\n\n            return adminConn;\n        }\n\n        /// <summary>\n        /// DB connection 객체가 close 상태인지 확인하는 메서드\n        /// </summary>\n        /// <param name=\"conn\">확인하려는 DB connection 객체</param>\n        /// <returns></returns>\n        private bool ConnClose(MySqlConnection conn)\n        {\n            // conn의 상태를 확인\n            if (conn != null)\n            {\n                conn.Close();\n            }\n\n            conn = null;\n\n            return true;\n        }\n\n        // ==============================================기초기능==============================================\n\n        public bool noResultConnectDB(\n            object obj,\n            string queryName\n        )\n        {\n            try\n            {\n                // DB 연결\n                MySqlConnection conn = UserConnect();\n\n                // Query 생성\n                query = makeQuery(obj, queryName);\n\n                // Query 실행\n                if (!processNoResultQuery(query, conn))\n                {\n                    return false;\n                }\n                \n                // DB 닫기\n                if (!ConnClose(conn))\n                {\n                    throw new NOTCLOSEEXCEPTION();\n                }\n            }\n            catch (NOTCLOSEEXCEPTION notCloseException)\n            {\n                // conn close를 실패했을 때\n                Console.WriteLine(notCloseException.Message);\n                return false;\n            }\n\n            return true;\n        }\n\n        public DataTable resultConnectDB(\n            object obj,\n            string queryName\n        )\n        {\n            DataTable dataTable = new DataTable();\n\n            try\n            {\n                // DB 연결\n                MySqlConnection conn = UserConnect();\n\n                // Query 생성\n                query = makeQuery(obj, queryName);\n\n                // Query 실행\n                dataTable = processResultQuery(query, conn);\n\n                // DB 닫기\n                if (!ConnClose(conn))\n                {\n                    throw new NOTCLOSEEXCEPTION();\n                }\n            }\n            catch (NOTCLOSEEXCEPTION notCloseException)\n            {\n                // conn close를 실패했을 때\n                Console.WriteLine(notCloseException.Message);\n                return null;\n            }\n\n            return dataTable;\n        }\n\n        public string makeQuery(object parmObj,string queryName)\n        {\n            string query=\"\";\n\n            if (queryName == \"Login\")\n            {\n                UserParm userParm = (UserParm)parmObj;\n                query = $\"select {Login}('{userParm.id}','{userParm.pwd}')\";\n            }\n            else if (queryName == \"Signin\")\n            {\n                UserParm userParm = (UserParm)parmObj;\n                query = $\"call {Signin}('{userParm.id}','{userParm.pwd}','{userParm.nick}','{userParm.name}','{userParm.phone}','{userParm.email}',null)\";\n            }\n            else if (queryName == \"GetUser\")\n            {\n                UserParm userParm = (UserParm)parmObj;\n                query = $\"call {GetUser}('{userParm.userCode}','{userParm.dataFormat}')\";\n            }\n            else if (queryName == \"GetUserCode\")\n            {\n                UserParm userParm = (UserParm)parmObj;\n                query = $\"call {GetUserCode}('{userParm.id}')\";\n            }\n            else if (queryName == \"ChangeUser\")\n            {\n                UserParm userParm = (UserParm)parmObj;\n                query = $\"call {ChangeUser}('{userParm.userCode}','{userParm.pwd}','{userParm.nick}','{userParm.name}','{userParm.phone}','{userParm.email}','{userParm.content}','{userParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddFriend\")\n            {\n                FriendParm friendParm = (FriendParm)parmObj;\n                query = $\"call {AddFriend}('{friendParm.userCode}','{friendParm.id}','{friendParm.phone}')\";\n            }\n            else if (queryName == \"GetFriend\")\n            {\n                FriendParm friendParm = (FriendParm)parmObj;\n                query = $\"call {GetFriend}('{friendParm.userCode}','{friendParm.friendCode}')\";\n            }\n            else if (queryName == \"SetFriend\")\n            {\n                FriendParm friendParm = (FriendParm)parmObj;\n                query = $\"call {SetFriend}('{friendParm.userCode}','{friendParm.friendCode}','{friendParm.nick}','{friendParm.hide}','{friendParm.block}','{friendParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddUserChannel\")\n            {\n                UserChannelParm userChannelParm = (UserChannelParm)parmObj;\n                query = $\"call {AddUserChannel}('{userChannelParm.userCode}','{userChannelParm.title}','{userChannelParm.state}','{userChannelParm.isPrivate}')\";\n            }\n            else if (queryName == \"GetUserChannel\")\n            {\n                UserChannelParm userChannelParm = (UserChannelParm)parmObj;\n                query = $\"call {GetUserChannel}('{userChannelParm.userCode}','{userChannelParm.channelCode}')\";\n            }\n            else if (queryName == \"SetUserChannel\")\n            {\n                UserChannelParm userChannelParm = (UserChannelParm)parmObj;\n                query = $\"call {SetUserChannel}('{userChannelParm.userCode}','{userChannelParm.channelCode}','{userChannelParm.title}','{userChannelParm.state}','{userChannelParm.isPrivate}','{userChannelParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddUserChecklist\")\n            {\n                UserChecklistParm userChecklistParm = (UserChecklistParm)parmObj;\n                query = $\"call {AddUserChecklist}('{userChecklistParm.userCode}','{userChecklistParm.channelCode}','{userChecklistParm.cotent}','{userChecklistParm.startTime}','{userChecklistParm.endTime}','{userChecklistParm.isPrivate}')\";\n            }\n            else if (queryName == \"GetUserChecklist\")\n            {\n                UserChecklistParm userChecklistParm = (UserChecklistParm)parmObj;\n                query = $\"call {GetUserChecklist}('{userChecklistParm.userCode}','{userChecklistParm.channelCode}','{userChecklistParm.checklistCode}')\";\n            }\n            else if (queryName == \"SetUserChecklist\")\n            {\n                UserChecklistParm userChecklistParm = (UserChecklistParm)parmObj;\n                query = $\"call {SetUserChecklist}('{userChecklistParm.userCode}','{userChecklistParm.channelCode}','{userChecklistParm.checklistCode}','{userChecklistParm.cotent}','{userChecklistParm.startTime}','{userChecklistParm.endTime}','{userChecklistParm.ischecked}','{userChecklistParm.isPrivate}','{userChecklistParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddUserCalendar\")\n            {\n                UserCalendarParm userCalendarParm = (UserCalendarParm)parmObj;\n                query = $\"call {AddUserCalendar}('{userCalendarParm.userCode}','{userCalendarParm.channelCode}','{userCalendarParm.content}','{userCalendarParm.startTime}','{userCalendarParm.endTime}','{userCalendarParm.isPrivate}')\";\n            }\n            else if (queryName == \"GetUserCalendar\")\n            {\n                UserCalendarParm userCalendarParm = (UserCalendarParm)parmObj;\n                query = $\"call {GetUserCalendar}('{userCalendarParm.userCode}','{userCalendarParm.channelCode}','{userCalendarParm.calendarCode}')\";\n            }\n            else if (queryName == \"SetUserCalendar\")\n            {\n                UserCalendarParm userCalendarParm = (UserCalendarParm)parmObj;\n                query = $\"call {SetUserCalendar}('{userCalendarParm.userCode}','{userCalendarParm.channelCode}','{userCalendarParm.calendarCode}','{userCalendarParm.content}','{userCalendarParm.startTime}','{userCalendarParm.endTime}','{userCalendarParm.isPrivate}','{userCalendarParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddServer\")\n            {\n                ServerParm serverParm = (ServerParm)parmObj;\n                query = $\"call {AddServer}('{serverParm.title}','{serverParm.adminCode}','{serverParm.isSingle}')\";\n            }\n            else if (queryName == \"GetServer\")\n            {\n                ServerParm serverParm = (ServerParm)parmObj;\n                query = $\"call {GetServer}('{serverParm.serverCode}')\";\n            }\n            else if (queryName == \"SetServer\")\n            {\n                ServerParm serverParm = (ServerParm)parmObj;\n                query = $\"call {SetServer}('{serverParm.serverCode}','{serverParm.title}','{serverParm.adminCode}', '{serverParm.isSingle}', '{serverParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddChannel\")\n            {\n                ChannelParm channelParm = (ChannelParm)parmObj;\n                query = $\"call {AddChannel}('{channelParm.serverCode}','{channelParm.title}','{channelParm.state}')\";\n            }\n            else if (queryName == \"GetChannel\")\n            {\n                ChannelParm channelParm = (ChannelParm)parmObj;\n                query = $\"call {GetChannel}('{channelParm.serverCode}','{channelParm.channelCode}')\";\n            }\n            else if (queryName == \"SetChannel\")\n            {\n                ChannelParm channelParm = (ChannelParm)parmObj;\n                query = $\"call {SetChannel}('{channelParm.serverCode}','{channelParm.channelCode}','{channelParm.title}','{channelParm.state}','{channelParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddMessage\")\n            {\n                MessageParm messageParm = (MessageParm)parmObj;\n                query = $\"call {AddMessage}('{messageParm.serverCode}','{messageParm.channelCode}','{messageParm.content}','{messageParm.creater}','{messageParm.startTime}','{messageParm.isPrivate}')\";\n            }\n            else if (queryName == \"GetMessage\")\n            {\n                MessageParm messageParm = (MessageParm)parmObj;\n                query = $\"call {GetMessage}('{messageParm.serverCode}','{messageParm.channelCode}','{messageParm.serverCode}')\";\n            }\n            else if (queryName == \"SetMessage\")\n            {\n                MessageParm messageParm = (MessageParm)parmObj;\n                query = $\"call {SetMessage}('{messageParm.serverCode}','{messageParm.channelCode}','{messageParm.messageCode}','{messageParm.content}','{messageParm.creater}','{messageParm.startTime}','{messageParm.isPrivate}','{messageParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddChecklist\")\n            {\n                ChecklistParm checklistParm = (ChecklistParm)parmObj;\n                query = $\"call {AddChecklist}('{checklistParm.serverCode}','{checklistParm.channelCode}','{checklistParm.content}','{checklistParm.startTime}','{checklistParm.endTime}','{checklistParm.isPrivate}')\";\n            }\n            else if (queryName == \"GetChecklist\")\n            {\n                ChecklistParm checklistParm = (ChecklistParm)parmObj;\n                query = $\"call {GetChecklist}('{checklistParm.serverCode}','{checklistParm.channelCode}','{checklistParm.checklistCode}')\";\n            }\n            else if (queryName == \"SetChecklist\")\n            {\n                ChecklistParm checklistParm = (ChecklistParm)parmObj;\n                query = $\"call {SetChecklist}('{checklistParm.serverCode}','{checklistParm.channelCode}','{checklistParm.checklistCode}','{checklistParm.content}','{checklistParm.creater}','{checklistParm.startTime}','{checklistParm.endTime}','{checklistParm.ischecked}','{checklistParm.isPrivate}','{checklistParm.isDeleted}')\";\n            }\n\n            else if (queryName == \"AddCalendar\")\n            {\n                CalendarParm calendarParm = (CalendarParm)parmObj;\n                query = $\"call {AddCalendar}('{calendarParm.serverCode}','{calendarParm.channelCode}','{calendarParm.content}','{calendarParm.creater}','{calendarParm.startTime}','{calendarParm.endTime}','{calendarParm.isPrivate}')\";\n            }\n            else if (queryName == \"GetCalendar\")\n            {\n                CalendarParm calendarParm = (CalendarParm)parmObj;\n                query = $\"call {GetCalendar}('{calendarParm.serverCode}','{calendarParm.channelCode}','{calendarParm.calendarCode}')\";\n            }\n            else if (queryName == \"SetCalendar\")\n            {\n                CalendarParm calendarParm = (CalendarParm)parmObj;\n                query = $\"call {SetCalendar}('{calendarParm.serverCode}','{calendarParm.channelCode}','{calendarParm.calendarCode}','{calendarParm.content}','{calendarParm.creater}','{calendarParm.startTime}','{calendarParm.endTime}','{calendarParm.isPrivate}','{calendarParm.isDeleted}')\";\n            }\n            \n\n            return query;\n        }\n\n        public bool processNoResultQuery(string query, MySqlConnection conn)\n        {\n            try\n            {\n                // command : 쿼리를 수행하는 객체\n                MySqlCommand msc = new MySqlCommand(query, conn);\n\n                \n                if (msc.ExecuteNonQuery() == 0)\n                {\n                    throw new NODATAEXCEPTION();\n                }\n            }\n            catch (NODATAEXCEPTION noDataException)\n            {\n                // Function이 수행되지 않았을 경우\n                Console.WriteLine(noDataException.Message);\n                return false;\n            }\n\n            return true;\n        }\n\n        public DataTable processResultQuery(string query, MySqlConnection conn)\n        {\n            // SQL Procedure 결과를 저장할 데이터 테이블 객체\n            var datatable = new DataTable();\n\n            try\n            {\n                // MySqlDataAdapter : 쿼리 수행 결과를 가져오는 객체\n                using (var mda = new MySqlDataAdapter(query, conn))\n                {\n                    if (mda != null)\n                    {\n                        mda.Fill(datatable);\n                    }\n                    // null일경우 예외처리 필요함\n                }\n\n            }\n            catch (NODATAEXCEPTION noDataException)\n            {\n                // Select문이 수행되지 않았을 경우\n                Console.WriteLine(noDataException.Message);\n                return null;\n            }\n\n            return datatable;\n        }\n    }\n}\n",
    "file_metrics": {
      "total_lines": 614,
      "code_lines": 471,
      "complexity": 100,
      "language": "Unknown"
    },
    "timestamp": "2025-09-30T10:32:22.330377"
  },
  {
    "file_name": "Program.cs",
    "ai_difficulty": 6,
    "user_difficulty": 6,
    "difficulty_diff": 0,
    "feedback_reason": "215156",
    "file_content": "﻿using MyMate_Server;\nusing MySql.Data.Types;\n//using ServerNetwork;\nusing ServerSystem;\nusing System;\nusing System.Data;\n//using DBM = MyMate_Server.DBModule;\n// 스테틱 클래스 생성하는 방식\n\n\n",
    "file_metrics": {
      "total_lines": 11,
      "code_lines": 5,
      "complexity": 1,
      "language": "Unknown"
    },
    "timestamp": "2025-09-30T10:35:11.811400"
  },
  {
    "file_name": "Program.cs",
    "ai_difficulty": 9,
    "user_difficulty": 9,
    "difficulty_diff": 0,
    "feedback_reason": "2213",
    "file_content": "﻿using MyMate_Server;\nusing MySql.Data.Types;\n//using ServerNetwork;\nusing ServerSystem;\nusing System;\nusing System.Data;\n//using DBM = MyMate_Server.DBModule;\n// 스테틱 클래스 생성하는 방식\n\n\n",
    "file_metrics": {
      "total_lines": 11,
      "code_lines": 5,
      "complexity": 1,
      "language": "Unknown"
    },
    "timestamp": "2025-09-30T10:35:31.583327"
  },
  {
    "file_name": "Program.cs",
    "ai_difficulty": 1,
    "user_difficulty": 1,
    "difficulty_diff": 0,
    "feedback_reason": "ASD",
    "file_content": "﻿using MyMate_Server;\nusing MySql.Data.Types;\n//using ServerNetwork;\nusing ServerSystem;\nusing System;\nusing System.Data;\n//using DBM = MyMate_Server.DBModule;\n// 스테틱 클래스 생성하는 방식\n\n\n",
    "file_metrics": {
      "total_lines": 11,
      "code_lines": 5,
      "complexity": 1,
      "language": "Unknown"
    },
    "timestamp": "2025-09-30T10:35:36.882998"
  }
]